#include<bits/stdc++.h>
using namespace std;

class MinHeapNode{
public:
	char data;
	int freq;
	MinHeapNode *left, *right;
	MinHeapNode(char data, int freq){
		this->data = data;
		this->freq = freq;
		left = right = NULL;
	}
};

struct compare{
	bool operator()(MinHeapNode* first, MinHeapNode* second){
		return first->freq > second->freq;
	}
};

void printCodes(MinHeapNode* root, string str){
	if(!root) return;
	if(root->data != '#') cout << root->data << " : " << str << endl;
	printCodes(root->left, str + "0");
	printCodes(root->right, str + "1");
}

void huffmanCodes(char data[], int freq[], int size){
	priority_queue<MinHeapNode*, vector<MinHeapNode*>, compare> minHeap;
	for(int i=0;i<size;i++){
		minHeap.push(new MinHeapNode(data[i], freq[i]));
	}
	while(minHeap.size() != 1){
		MinHeapNode* smallest = minHeap.top();
		minHeap.pop();

		MinHeapNode* secondSmallest = minHeap.top();
		minHeap.pop();

		MinHeapNode* mergedNode = new MinHeapNode('#', smallest->freq + secondSmallest->freq);
		mergedNode->left = smallest;
		mergedNode->right = secondSmallest;
		minHeap.push(mergedNode);
	}
	printCodes(minHeap.top(), "");
}

int main(){
	char arr[] = {'a', 'b', 'c', 'd', 'e', 'f'};
	int freq[] = {5, 9, 12, 13, 16, 45 };

	int size = 6;

	huffmanCodes(arr, freq, size);

}